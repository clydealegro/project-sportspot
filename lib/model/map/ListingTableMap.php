<?php


/**
 * This class defines the structure of the 'listing' table.
 *
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * 04/28/12 16:40:15
 *
 *
 * This map class is used by Propel to do runtime db structure discovery.
 * For example, the createSelectSql() method checks the type of a given column used in an
 * ORDER BY clause to know whether it needs to apply SQL to make the ORDER BY case-insensitive
 * (i.e. if it's a text column type).
 *
 * @package    lib.model.map
 */
class ListingTableMap extends TableMap {

	/**
	 * The (dot-path) name of this class
	 */
	const CLASS_NAME = 'lib.model.map.ListingTableMap';

	/**
	 * Initialize the table attributes, columns and validators
	 * Relations are not initialized by this method since they are lazy loaded
	 *
	 * @return     void
	 * @throws     PropelException
	 */
	public function initialize()
	{
	  // attributes
		$this->setName('listing');
		$this->setPhpName('Listing');
		$this->setClassname('Listing');
		$this->setPackage('lib.model');
		$this->setUseIdGenerator(true);
		// columns
		$this->addPrimaryKey('LISTING_ID', 'ListingId', 'INTEGER', true, 11, null);
		$this->addForeignKey('ACCOUNT_ID', 'AccountId', 'INTEGER', 'account', 'ACCOUNT_ID', true, 11, null);
		$this->addColumn('NAME', 'Name', 'VARCHAR', false, 45, null);
		$this->addColumn('COMPLETE_ADDRESS', 'CompleteAddress', 'VARCHAR', false, 45, null);
		$this->addColumn('DETAILS', 'Details', 'LONGVARCHAR', false, null, null);
		$this->addColumn('CONTACT_PERSON', 'ContactPerson', 'VARCHAR', false, 45, null);
		$this->addColumn('CONTACT_NUMBER', 'ContactNumber', 'VARCHAR', false, 45, null);
		// validators
	} // initialize()

	/**
	 * Build the RelationMap objects for this table relationships
	 */
	public function buildRelations()
	{
    $this->addRelation('Account', 'Account', RelationMap::MANY_TO_ONE, array('account_id' => 'account_id', ), 'RESTRICT', 'RESTRICT');
    $this->addRelation('Announcement', 'Announcement', RelationMap::ONE_TO_MANY, array('listing_id' => 'listing_id', ), 'RESTRICT', 'RESTRICT');
    $this->addRelation('ListingToAvailability', 'ListingToAvailability', RelationMap::ONE_TO_MANY, array('listing_id' => 'listing_id', ), 'RESTRICT', 'RESTRICT');
    $this->addRelation('ListingToCategory', 'ListingToCategory', RelationMap::ONE_TO_MANY, array('listing_id' => 'listing_id', ), 'RESTRICT', 'RESTRICT');
    $this->addRelation('ListingToMap', 'ListingToMap', RelationMap::ONE_TO_MANY, array('listing_id' => 'listing_id', ), 'RESTRICT', 'RESTRICT');
    $this->addRelation('ListingToPhoto', 'ListingToPhoto', RelationMap::ONE_TO_MANY, array('listing_id' => 'listing_id', ), 'RESTRICT', 'RESTRICT');
	} // buildRelations()

	/**
	 * 
	 * Gets the list of behaviors registered for this table
	 * 
	 * @return array Associative array (name => parameters) of behaviors
	 */
	public function getBehaviors()
	{
		return array(
			'symfony' => array('form' => 'true', 'filter' => 'true', ),
			'symfony_behaviors' => array(),
		);
	} // getBehaviors()

} // ListingTableMap
