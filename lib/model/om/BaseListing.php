<?php

/**
 * Base class that represents a row from the 'listing' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * 04/28/12 16:40:15
 *
 * @package    lib.model.om
 */
abstract class BaseListing extends BaseObject  implements Persistent {


	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        ListingPeer
	 */
	protected static $peer;

	/**
	 * The value for the listing_id field.
	 * @var        int
	 */
	protected $listing_id;

	/**
	 * The value for the account_id field.
	 * @var        int
	 */
	protected $account_id;

	/**
	 * The value for the name field.
	 * @var        string
	 */
	protected $name;

	/**
	 * The value for the complete_address field.
	 * @var        string
	 */
	protected $complete_address;

	/**
	 * The value for the details field.
	 * @var        string
	 */
	protected $details;

	/**
	 * The value for the contact_person field.
	 * @var        string
	 */
	protected $contact_person;

	/**
	 * The value for the contact_number field.
	 * @var        string
	 */
	protected $contact_number;

	/**
	 * @var        Account
	 */
	protected $aAccount;

	/**
	 * @var        array Announcement[] Collection to store aggregation of Announcement objects.
	 */
	protected $collAnnouncements;

	/**
	 * @var        Criteria The criteria used to select the current contents of collAnnouncements.
	 */
	private $lastAnnouncementCriteria = null;

	/**
	 * @var        array ListingToAvailability[] Collection to store aggregation of ListingToAvailability objects.
	 */
	protected $collListingToAvailabilitys;

	/**
	 * @var        Criteria The criteria used to select the current contents of collListingToAvailabilitys.
	 */
	private $lastListingToAvailabilityCriteria = null;

	/**
	 * @var        array ListingToCategory[] Collection to store aggregation of ListingToCategory objects.
	 */
	protected $collListingToCategorys;

	/**
	 * @var        Criteria The criteria used to select the current contents of collListingToCategorys.
	 */
	private $lastListingToCategoryCriteria = null;

	/**
	 * @var        array ListingToMap[] Collection to store aggregation of ListingToMap objects.
	 */
	protected $collListingToMaps;

	/**
	 * @var        Criteria The criteria used to select the current contents of collListingToMaps.
	 */
	private $lastListingToMapCriteria = null;

	/**
	 * @var        array ListingToPhoto[] Collection to store aggregation of ListingToPhoto objects.
	 */
	protected $collListingToPhotos;

	/**
	 * @var        Criteria The criteria used to select the current contents of collListingToPhotos.
	 */
	private $lastListingToPhotoCriteria = null;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	// symfony behavior
	
	const PEER = 'ListingPeer';

	/**
	 * Get the [listing_id] column value.
	 * 
	 * @return     int
	 */
	public function getListingId()
	{
		return $this->listing_id;
	}

	/**
	 * Get the [account_id] column value.
	 * 
	 * @return     int
	 */
	public function getAccountId()
	{
		return $this->account_id;
	}

	/**
	 * Get the [name] column value.
	 * 
	 * @return     string
	 */
	public function getName()
	{
		return $this->name;
	}

	/**
	 * Get the [complete_address] column value.
	 * 
	 * @return     string
	 */
	public function getCompleteAddress()
	{
		return $this->complete_address;
	}

	/**
	 * Get the [details] column value.
	 * 
	 * @return     string
	 */
	public function getDetails()
	{
		return $this->details;
	}

	/**
	 * Get the [contact_person] column value.
	 * 
	 * @return     string
	 */
	public function getContactPerson()
	{
		return $this->contact_person;
	}

	/**
	 * Get the [contact_number] column value.
	 * 
	 * @return     string
	 */
	public function getContactNumber()
	{
		return $this->contact_number;
	}

	/**
	 * Set the value of [listing_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Listing The current object (for fluent API support)
	 */
	public function setListingId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->listing_id !== $v) {
			$this->listing_id = $v;
			$this->modifiedColumns[] = ListingPeer::LISTING_ID;
		}

		return $this;
	} // setListingId()

	/**
	 * Set the value of [account_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Listing The current object (for fluent API support)
	 */
	public function setAccountId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->account_id !== $v) {
			$this->account_id = $v;
			$this->modifiedColumns[] = ListingPeer::ACCOUNT_ID;
		}

		if ($this->aAccount !== null && $this->aAccount->getAccountId() !== $v) {
			$this->aAccount = null;
		}

		return $this;
	} // setAccountId()

	/**
	 * Set the value of [name] column.
	 * 
	 * @param      string $v new value
	 * @return     Listing The current object (for fluent API support)
	 */
	public function setName($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->name !== $v) {
			$this->name = $v;
			$this->modifiedColumns[] = ListingPeer::NAME;
		}

		return $this;
	} // setName()

	/**
	 * Set the value of [complete_address] column.
	 * 
	 * @param      string $v new value
	 * @return     Listing The current object (for fluent API support)
	 */
	public function setCompleteAddress($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->complete_address !== $v) {
			$this->complete_address = $v;
			$this->modifiedColumns[] = ListingPeer::COMPLETE_ADDRESS;
		}

		return $this;
	} // setCompleteAddress()

	/**
	 * Set the value of [details] column.
	 * 
	 * @param      string $v new value
	 * @return     Listing The current object (for fluent API support)
	 */
	public function setDetails($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->details !== $v) {
			$this->details = $v;
			$this->modifiedColumns[] = ListingPeer::DETAILS;
		}

		return $this;
	} // setDetails()

	/**
	 * Set the value of [contact_person] column.
	 * 
	 * @param      string $v new value
	 * @return     Listing The current object (for fluent API support)
	 */
	public function setContactPerson($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->contact_person !== $v) {
			$this->contact_person = $v;
			$this->modifiedColumns[] = ListingPeer::CONTACT_PERSON;
		}

		return $this;
	} // setContactPerson()

	/**
	 * Set the value of [contact_number] column.
	 * 
	 * @param      string $v new value
	 * @return     Listing The current object (for fluent API support)
	 */
	public function setContactNumber($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->contact_number !== $v) {
			$this->contact_number = $v;
			$this->modifiedColumns[] = ListingPeer::CONTACT_NUMBER;
		}

		return $this;
	} // setContactNumber()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->listing_id = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
			$this->account_id = ($row[$startcol + 1] !== null) ? (int) $row[$startcol + 1] : null;
			$this->name = ($row[$startcol + 2] !== null) ? (string) $row[$startcol + 2] : null;
			$this->complete_address = ($row[$startcol + 3] !== null) ? (string) $row[$startcol + 3] : null;
			$this->details = ($row[$startcol + 4] !== null) ? (string) $row[$startcol + 4] : null;
			$this->contact_person = ($row[$startcol + 5] !== null) ? (string) $row[$startcol + 5] : null;
			$this->contact_number = ($row[$startcol + 6] !== null) ? (string) $row[$startcol + 6] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 7; // 7 = ListingPeer::NUM_COLUMNS - ListingPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating Listing object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

		if ($this->aAccount !== null && $this->account_id !== $this->aAccount->getAccountId()) {
			$this->aAccount = null;
		}
	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(ListingPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = ListingPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

			$this->aAccount = null;
			$this->collAnnouncements = null;
			$this->lastAnnouncementCriteria = null;

			$this->collListingToAvailabilitys = null;
			$this->lastListingToAvailabilityCriteria = null;

			$this->collListingToCategorys = null;
			$this->lastListingToCategoryCriteria = null;

			$this->collListingToMaps = null;
			$this->lastListingToMapCriteria = null;

			$this->collListingToPhotos = null;
			$this->lastListingToPhotoCriteria = null;

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(ListingPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$ret = $this->preDelete($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseListing:delete:pre') as $callable)
			{
			  if (call_user_func($callable, $this, $con))
			  {
			    $con->commit();
			
			    return;
			  }
			}

			if ($ret) {
				ListingPeer::doDelete($this, $con);
				$this->postDelete($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseListing:delete:post') as $callable)
				{
				  call_user_func($callable, $this, $con);
				}

				$this->setDeleted(true);
				$con->commit();
			} else {
				$con->commit();
			}
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(ListingPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		$isInsert = $this->isNew();
		try {
			$ret = $this->preSave($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseListing:save:pre') as $callable)
			{
			  if (is_integer($affectedRows = call_user_func($callable, $this, $con)))
			  {
			    $con->commit();
			
			    return $affectedRows;
			  }
			}

			if ($isInsert) {
				$ret = $ret && $this->preInsert($con);
			} else {
				$ret = $ret && $this->preUpdate($con);
			}
			if ($ret) {
				$affectedRows = $this->doSave($con);
				if ($isInsert) {
					$this->postInsert($con);
				} else {
					$this->postUpdate($con);
				}
				$this->postSave($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseListing:save:post') as $callable)
				{
				  call_user_func($callable, $this, $con, $affectedRows);
				}

				ListingPeer::addInstanceToPool($this);
			} else {
				$affectedRows = 0;
			}
			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			// We call the save method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aAccount !== null) {
				if ($this->aAccount->isModified() || $this->aAccount->isNew()) {
					$affectedRows += $this->aAccount->save($con);
				}
				$this->setAccount($this->aAccount);
			}

			if ($this->isNew() ) {
				$this->modifiedColumns[] = ListingPeer::LISTING_ID;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = ListingPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setListingId($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += ListingPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			if ($this->collAnnouncements !== null) {
				foreach ($this->collAnnouncements as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collListingToAvailabilitys !== null) {
				foreach ($this->collListingToAvailabilitys as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collListingToCategorys !== null) {
				foreach ($this->collListingToCategorys as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collListingToMaps !== null) {
				foreach ($this->collListingToMaps as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collListingToPhotos !== null) {
				foreach ($this->collListingToPhotos as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			// We call the validate method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aAccount !== null) {
				if (!$this->aAccount->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aAccount->getValidationFailures());
				}
			}


			if (($retval = ListingPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}


				if ($this->collAnnouncements !== null) {
					foreach ($this->collAnnouncements as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collListingToAvailabilitys !== null) {
					foreach ($this->collListingToAvailabilitys as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collListingToCategorys !== null) {
					foreach ($this->collListingToCategorys as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collListingToMaps !== null) {
					foreach ($this->collListingToMaps as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collListingToPhotos !== null) {
					foreach ($this->collListingToPhotos as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}


			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = ListingPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getListingId();
				break;
			case 1:
				return $this->getAccountId();
				break;
			case 2:
				return $this->getName();
				break;
			case 3:
				return $this->getCompleteAddress();
				break;
			case 4:
				return $this->getDetails();
				break;
			case 5:
				return $this->getContactPerson();
				break;
			case 6:
				return $this->getContactNumber();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = ListingPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getListingId(),
			$keys[1] => $this->getAccountId(),
			$keys[2] => $this->getName(),
			$keys[3] => $this->getCompleteAddress(),
			$keys[4] => $this->getDetails(),
			$keys[5] => $this->getContactPerson(),
			$keys[6] => $this->getContactNumber(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = ListingPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setListingId($value);
				break;
			case 1:
				$this->setAccountId($value);
				break;
			case 2:
				$this->setName($value);
				break;
			case 3:
				$this->setCompleteAddress($value);
				break;
			case 4:
				$this->setDetails($value);
				break;
			case 5:
				$this->setContactPerson($value);
				break;
			case 6:
				$this->setContactNumber($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = ListingPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setListingId($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setAccountId($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setName($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setCompleteAddress($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setDetails($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setContactPerson($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setContactNumber($arr[$keys[6]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(ListingPeer::DATABASE_NAME);

		if ($this->isColumnModified(ListingPeer::LISTING_ID)) $criteria->add(ListingPeer::LISTING_ID, $this->listing_id);
		if ($this->isColumnModified(ListingPeer::ACCOUNT_ID)) $criteria->add(ListingPeer::ACCOUNT_ID, $this->account_id);
		if ($this->isColumnModified(ListingPeer::NAME)) $criteria->add(ListingPeer::NAME, $this->name);
		if ($this->isColumnModified(ListingPeer::COMPLETE_ADDRESS)) $criteria->add(ListingPeer::COMPLETE_ADDRESS, $this->complete_address);
		if ($this->isColumnModified(ListingPeer::DETAILS)) $criteria->add(ListingPeer::DETAILS, $this->details);
		if ($this->isColumnModified(ListingPeer::CONTACT_PERSON)) $criteria->add(ListingPeer::CONTACT_PERSON, $this->contact_person);
		if ($this->isColumnModified(ListingPeer::CONTACT_NUMBER)) $criteria->add(ListingPeer::CONTACT_NUMBER, $this->contact_number);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(ListingPeer::DATABASE_NAME);

		$criteria->add(ListingPeer::LISTING_ID, $this->listing_id);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getListingId();
	}

	/**
	 * Generic method to set the primary key (listing_id column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setListingId($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of Listing (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setAccountId($this->account_id);

		$copyObj->setName($this->name);

		$copyObj->setCompleteAddress($this->complete_address);

		$copyObj->setDetails($this->details);

		$copyObj->setContactPerson($this->contact_person);

		$copyObj->setContactNumber($this->contact_number);


		if ($deepCopy) {
			// important: temporarily setNew(false) because this affects the behavior of
			// the getter/setter methods for fkey referrer objects.
			$copyObj->setNew(false);

			foreach ($this->getAnnouncements() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addAnnouncement($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getListingToAvailabilitys() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addListingToAvailability($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getListingToCategorys() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addListingToCategory($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getListingToMaps() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addListingToMap($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getListingToPhotos() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addListingToPhoto($relObj->copy($deepCopy));
				}
			}

		} // if ($deepCopy)


		$copyObj->setNew(true);

		$copyObj->setListingId(NULL); // this is a auto-increment column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     Listing Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     ListingPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new ListingPeer();
		}
		return self::$peer;
	}

	/**
	 * Declares an association between this object and a Account object.
	 *
	 * @param      Account $v
	 * @return     Listing The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setAccount(Account $v = null)
	{
		if ($v === null) {
			$this->setAccountId(NULL);
		} else {
			$this->setAccountId($v->getAccountId());
		}

		$this->aAccount = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Account object, it will not be re-added.
		if ($v !== null) {
			$v->addListing($this);
		}

		return $this;
	}


	/**
	 * Get the associated Account object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Account The associated Account object.
	 * @throws     PropelException
	 */
	public function getAccount(PropelPDO $con = null)
	{
		if ($this->aAccount === null && ($this->account_id !== null)) {
			$this->aAccount = AccountPeer::retrieveByPk($this->account_id);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aAccount->addListings($this);
			 */
		}
		return $this->aAccount;
	}

	/**
	 * Clears out the collAnnouncements collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addAnnouncements()
	 */
	public function clearAnnouncements()
	{
		$this->collAnnouncements = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collAnnouncements collection (array).
	 *
	 * By default this just sets the collAnnouncements collection to an empty array (like clearcollAnnouncements());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initAnnouncements()
	{
		$this->collAnnouncements = array();
	}

	/**
	 * Gets an array of Announcement objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Listing has previously been saved, it will retrieve
	 * related Announcements from storage. If this Listing is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Announcement[]
	 * @throws     PropelException
	 */
	public function getAnnouncements($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ListingPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collAnnouncements === null) {
			if ($this->isNew()) {
			   $this->collAnnouncements = array();
			} else {

				$criteria->add(AnnouncementPeer::LISTING_ID, $this->listing_id);

				AnnouncementPeer::addSelectColumns($criteria);
				$this->collAnnouncements = AnnouncementPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(AnnouncementPeer::LISTING_ID, $this->listing_id);

				AnnouncementPeer::addSelectColumns($criteria);
				if (!isset($this->lastAnnouncementCriteria) || !$this->lastAnnouncementCriteria->equals($criteria)) {
					$this->collAnnouncements = AnnouncementPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastAnnouncementCriteria = $criteria;
		return $this->collAnnouncements;
	}

	/**
	 * Returns the number of related Announcement objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Announcement objects.
	 * @throws     PropelException
	 */
	public function countAnnouncements(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ListingPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collAnnouncements === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(AnnouncementPeer::LISTING_ID, $this->listing_id);

				$count = AnnouncementPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(AnnouncementPeer::LISTING_ID, $this->listing_id);

				if (!isset($this->lastAnnouncementCriteria) || !$this->lastAnnouncementCriteria->equals($criteria)) {
					$count = AnnouncementPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collAnnouncements);
				}
			} else {
				$count = count($this->collAnnouncements);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Announcement object to this object
	 * through the Announcement foreign key attribute.
	 *
	 * @param      Announcement $l Announcement
	 * @return     void
	 * @throws     PropelException
	 */
	public function addAnnouncement(Announcement $l)
	{
		if ($this->collAnnouncements === null) {
			$this->initAnnouncements();
		}
		if (!in_array($l, $this->collAnnouncements, true)) { // only add it if the **same** object is not already associated
			array_push($this->collAnnouncements, $l);
			$l->setListing($this);
		}
	}

	/**
	 * Clears out the collListingToAvailabilitys collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addListingToAvailabilitys()
	 */
	public function clearListingToAvailabilitys()
	{
		$this->collListingToAvailabilitys = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collListingToAvailabilitys collection (array).
	 *
	 * By default this just sets the collListingToAvailabilitys collection to an empty array (like clearcollListingToAvailabilitys());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initListingToAvailabilitys()
	{
		$this->collListingToAvailabilitys = array();
	}

	/**
	 * Gets an array of ListingToAvailability objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Listing has previously been saved, it will retrieve
	 * related ListingToAvailabilitys from storage. If this Listing is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array ListingToAvailability[]
	 * @throws     PropelException
	 */
	public function getListingToAvailabilitys($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ListingPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collListingToAvailabilitys === null) {
			if ($this->isNew()) {
			   $this->collListingToAvailabilitys = array();
			} else {

				$criteria->add(ListingToAvailabilityPeer::LISTING_ID, $this->listing_id);

				ListingToAvailabilityPeer::addSelectColumns($criteria);
				$this->collListingToAvailabilitys = ListingToAvailabilityPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(ListingToAvailabilityPeer::LISTING_ID, $this->listing_id);

				ListingToAvailabilityPeer::addSelectColumns($criteria);
				if (!isset($this->lastListingToAvailabilityCriteria) || !$this->lastListingToAvailabilityCriteria->equals($criteria)) {
					$this->collListingToAvailabilitys = ListingToAvailabilityPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastListingToAvailabilityCriteria = $criteria;
		return $this->collListingToAvailabilitys;
	}

	/**
	 * Returns the number of related ListingToAvailability objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related ListingToAvailability objects.
	 * @throws     PropelException
	 */
	public function countListingToAvailabilitys(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ListingPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collListingToAvailabilitys === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(ListingToAvailabilityPeer::LISTING_ID, $this->listing_id);

				$count = ListingToAvailabilityPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(ListingToAvailabilityPeer::LISTING_ID, $this->listing_id);

				if (!isset($this->lastListingToAvailabilityCriteria) || !$this->lastListingToAvailabilityCriteria->equals($criteria)) {
					$count = ListingToAvailabilityPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collListingToAvailabilitys);
				}
			} else {
				$count = count($this->collListingToAvailabilitys);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a ListingToAvailability object to this object
	 * through the ListingToAvailability foreign key attribute.
	 *
	 * @param      ListingToAvailability $l ListingToAvailability
	 * @return     void
	 * @throws     PropelException
	 */
	public function addListingToAvailability(ListingToAvailability $l)
	{
		if ($this->collListingToAvailabilitys === null) {
			$this->initListingToAvailabilitys();
		}
		if (!in_array($l, $this->collListingToAvailabilitys, true)) { // only add it if the **same** object is not already associated
			array_push($this->collListingToAvailabilitys, $l);
			$l->setListing($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Listing is new, it will return
	 * an empty collection; or if this Listing has previously
	 * been saved, it will retrieve related ListingToAvailabilitys from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Listing.
	 */
	public function getListingToAvailabilitysJoinAvailability($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ListingPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collListingToAvailabilitys === null) {
			if ($this->isNew()) {
				$this->collListingToAvailabilitys = array();
			} else {

				$criteria->add(ListingToAvailabilityPeer::LISTING_ID, $this->listing_id);

				$this->collListingToAvailabilitys = ListingToAvailabilityPeer::doSelectJoinAvailability($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(ListingToAvailabilityPeer::LISTING_ID, $this->listing_id);

			if (!isset($this->lastListingToAvailabilityCriteria) || !$this->lastListingToAvailabilityCriteria->equals($criteria)) {
				$this->collListingToAvailabilitys = ListingToAvailabilityPeer::doSelectJoinAvailability($criteria, $con, $join_behavior);
			}
		}
		$this->lastListingToAvailabilityCriteria = $criteria;

		return $this->collListingToAvailabilitys;
	}

	/**
	 * Clears out the collListingToCategorys collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addListingToCategorys()
	 */
	public function clearListingToCategorys()
	{
		$this->collListingToCategorys = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collListingToCategorys collection (array).
	 *
	 * By default this just sets the collListingToCategorys collection to an empty array (like clearcollListingToCategorys());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initListingToCategorys()
	{
		$this->collListingToCategorys = array();
	}

	/**
	 * Gets an array of ListingToCategory objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Listing has previously been saved, it will retrieve
	 * related ListingToCategorys from storage. If this Listing is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array ListingToCategory[]
	 * @throws     PropelException
	 */
	public function getListingToCategorys($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ListingPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collListingToCategorys === null) {
			if ($this->isNew()) {
			   $this->collListingToCategorys = array();
			} else {

				$criteria->add(ListingToCategoryPeer::LISTING_ID, $this->listing_id);

				ListingToCategoryPeer::addSelectColumns($criteria);
				$this->collListingToCategorys = ListingToCategoryPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(ListingToCategoryPeer::LISTING_ID, $this->listing_id);

				ListingToCategoryPeer::addSelectColumns($criteria);
				if (!isset($this->lastListingToCategoryCriteria) || !$this->lastListingToCategoryCriteria->equals($criteria)) {
					$this->collListingToCategorys = ListingToCategoryPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastListingToCategoryCriteria = $criteria;
		return $this->collListingToCategorys;
	}

	/**
	 * Returns the number of related ListingToCategory objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related ListingToCategory objects.
	 * @throws     PropelException
	 */
	public function countListingToCategorys(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ListingPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collListingToCategorys === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(ListingToCategoryPeer::LISTING_ID, $this->listing_id);

				$count = ListingToCategoryPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(ListingToCategoryPeer::LISTING_ID, $this->listing_id);

				if (!isset($this->lastListingToCategoryCriteria) || !$this->lastListingToCategoryCriteria->equals($criteria)) {
					$count = ListingToCategoryPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collListingToCategorys);
				}
			} else {
				$count = count($this->collListingToCategorys);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a ListingToCategory object to this object
	 * through the ListingToCategory foreign key attribute.
	 *
	 * @param      ListingToCategory $l ListingToCategory
	 * @return     void
	 * @throws     PropelException
	 */
	public function addListingToCategory(ListingToCategory $l)
	{
		if ($this->collListingToCategorys === null) {
			$this->initListingToCategorys();
		}
		if (!in_array($l, $this->collListingToCategorys, true)) { // only add it if the **same** object is not already associated
			array_push($this->collListingToCategorys, $l);
			$l->setListing($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Listing is new, it will return
	 * an empty collection; or if this Listing has previously
	 * been saved, it will retrieve related ListingToCategorys from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Listing.
	 */
	public function getListingToCategorysJoinCategory($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ListingPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collListingToCategorys === null) {
			if ($this->isNew()) {
				$this->collListingToCategorys = array();
			} else {

				$criteria->add(ListingToCategoryPeer::LISTING_ID, $this->listing_id);

				$this->collListingToCategorys = ListingToCategoryPeer::doSelectJoinCategory($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(ListingToCategoryPeer::LISTING_ID, $this->listing_id);

			if (!isset($this->lastListingToCategoryCriteria) || !$this->lastListingToCategoryCriteria->equals($criteria)) {
				$this->collListingToCategorys = ListingToCategoryPeer::doSelectJoinCategory($criteria, $con, $join_behavior);
			}
		}
		$this->lastListingToCategoryCriteria = $criteria;

		return $this->collListingToCategorys;
	}

	/**
	 * Clears out the collListingToMaps collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addListingToMaps()
	 */
	public function clearListingToMaps()
	{
		$this->collListingToMaps = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collListingToMaps collection (array).
	 *
	 * By default this just sets the collListingToMaps collection to an empty array (like clearcollListingToMaps());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initListingToMaps()
	{
		$this->collListingToMaps = array();
	}

	/**
	 * Gets an array of ListingToMap objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Listing has previously been saved, it will retrieve
	 * related ListingToMaps from storage. If this Listing is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array ListingToMap[]
	 * @throws     PropelException
	 */
	public function getListingToMaps($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ListingPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collListingToMaps === null) {
			if ($this->isNew()) {
			   $this->collListingToMaps = array();
			} else {

				$criteria->add(ListingToMapPeer::LISTING_ID, $this->listing_id);

				ListingToMapPeer::addSelectColumns($criteria);
				$this->collListingToMaps = ListingToMapPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(ListingToMapPeer::LISTING_ID, $this->listing_id);

				ListingToMapPeer::addSelectColumns($criteria);
				if (!isset($this->lastListingToMapCriteria) || !$this->lastListingToMapCriteria->equals($criteria)) {
					$this->collListingToMaps = ListingToMapPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastListingToMapCriteria = $criteria;
		return $this->collListingToMaps;
	}

	/**
	 * Returns the number of related ListingToMap objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related ListingToMap objects.
	 * @throws     PropelException
	 */
	public function countListingToMaps(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ListingPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collListingToMaps === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(ListingToMapPeer::LISTING_ID, $this->listing_id);

				$count = ListingToMapPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(ListingToMapPeer::LISTING_ID, $this->listing_id);

				if (!isset($this->lastListingToMapCriteria) || !$this->lastListingToMapCriteria->equals($criteria)) {
					$count = ListingToMapPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collListingToMaps);
				}
			} else {
				$count = count($this->collListingToMaps);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a ListingToMap object to this object
	 * through the ListingToMap foreign key attribute.
	 *
	 * @param      ListingToMap $l ListingToMap
	 * @return     void
	 * @throws     PropelException
	 */
	public function addListingToMap(ListingToMap $l)
	{
		if ($this->collListingToMaps === null) {
			$this->initListingToMaps();
		}
		if (!in_array($l, $this->collListingToMaps, true)) { // only add it if the **same** object is not already associated
			array_push($this->collListingToMaps, $l);
			$l->setListing($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Listing is new, it will return
	 * an empty collection; or if this Listing has previously
	 * been saved, it will retrieve related ListingToMaps from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Listing.
	 */
	public function getListingToMapsJoinMapInfo($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ListingPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collListingToMaps === null) {
			if ($this->isNew()) {
				$this->collListingToMaps = array();
			} else {

				$criteria->add(ListingToMapPeer::LISTING_ID, $this->listing_id);

				$this->collListingToMaps = ListingToMapPeer::doSelectJoinMapInfo($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(ListingToMapPeer::LISTING_ID, $this->listing_id);

			if (!isset($this->lastListingToMapCriteria) || !$this->lastListingToMapCriteria->equals($criteria)) {
				$this->collListingToMaps = ListingToMapPeer::doSelectJoinMapInfo($criteria, $con, $join_behavior);
			}
		}
		$this->lastListingToMapCriteria = $criteria;

		return $this->collListingToMaps;
	}

	/**
	 * Clears out the collListingToPhotos collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addListingToPhotos()
	 */
	public function clearListingToPhotos()
	{
		$this->collListingToPhotos = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collListingToPhotos collection (array).
	 *
	 * By default this just sets the collListingToPhotos collection to an empty array (like clearcollListingToPhotos());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initListingToPhotos()
	{
		$this->collListingToPhotos = array();
	}

	/**
	 * Gets an array of ListingToPhoto objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Listing has previously been saved, it will retrieve
	 * related ListingToPhotos from storage. If this Listing is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array ListingToPhoto[]
	 * @throws     PropelException
	 */
	public function getListingToPhotos($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ListingPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collListingToPhotos === null) {
			if ($this->isNew()) {
			   $this->collListingToPhotos = array();
			} else {

				$criteria->add(ListingToPhotoPeer::LISTING_ID, $this->listing_id);

				ListingToPhotoPeer::addSelectColumns($criteria);
				$this->collListingToPhotos = ListingToPhotoPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(ListingToPhotoPeer::LISTING_ID, $this->listing_id);

				ListingToPhotoPeer::addSelectColumns($criteria);
				if (!isset($this->lastListingToPhotoCriteria) || !$this->lastListingToPhotoCriteria->equals($criteria)) {
					$this->collListingToPhotos = ListingToPhotoPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastListingToPhotoCriteria = $criteria;
		return $this->collListingToPhotos;
	}

	/**
	 * Returns the number of related ListingToPhoto objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related ListingToPhoto objects.
	 * @throws     PropelException
	 */
	public function countListingToPhotos(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ListingPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collListingToPhotos === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(ListingToPhotoPeer::LISTING_ID, $this->listing_id);

				$count = ListingToPhotoPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(ListingToPhotoPeer::LISTING_ID, $this->listing_id);

				if (!isset($this->lastListingToPhotoCriteria) || !$this->lastListingToPhotoCriteria->equals($criteria)) {
					$count = ListingToPhotoPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collListingToPhotos);
				}
			} else {
				$count = count($this->collListingToPhotos);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a ListingToPhoto object to this object
	 * through the ListingToPhoto foreign key attribute.
	 *
	 * @param      ListingToPhoto $l ListingToPhoto
	 * @return     void
	 * @throws     PropelException
	 */
	public function addListingToPhoto(ListingToPhoto $l)
	{
		if ($this->collListingToPhotos === null) {
			$this->initListingToPhotos();
		}
		if (!in_array($l, $this->collListingToPhotos, true)) { // only add it if the **same** object is not already associated
			array_push($this->collListingToPhotos, $l);
			$l->setListing($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Listing is new, it will return
	 * an empty collection; or if this Listing has previously
	 * been saved, it will retrieve related ListingToPhotos from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Listing.
	 */
	public function getListingToPhotosJoinPhoto($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ListingPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collListingToPhotos === null) {
			if ($this->isNew()) {
				$this->collListingToPhotos = array();
			} else {

				$criteria->add(ListingToPhotoPeer::LISTING_ID, $this->listing_id);

				$this->collListingToPhotos = ListingToPhotoPeer::doSelectJoinPhoto($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(ListingToPhotoPeer::LISTING_ID, $this->listing_id);

			if (!isset($this->lastListingToPhotoCriteria) || !$this->lastListingToPhotoCriteria->equals($criteria)) {
				$this->collListingToPhotos = ListingToPhotoPeer::doSelectJoinPhoto($criteria, $con, $join_behavior);
			}
		}
		$this->lastListingToPhotoCriteria = $criteria;

		return $this->collListingToPhotos;
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
			if ($this->collAnnouncements) {
				foreach ((array) $this->collAnnouncements as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collListingToAvailabilitys) {
				foreach ((array) $this->collListingToAvailabilitys as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collListingToCategorys) {
				foreach ((array) $this->collListingToCategorys as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collListingToMaps) {
				foreach ((array) $this->collListingToMaps as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collListingToPhotos) {
				foreach ((array) $this->collListingToPhotos as $o) {
					$o->clearAllReferences($deep);
				}
			}
		} // if ($deep)

		$this->collAnnouncements = null;
		$this->collListingToAvailabilitys = null;
		$this->collListingToCategorys = null;
		$this->collListingToMaps = null;
		$this->collListingToPhotos = null;
			$this->aAccount = null;
	}

	// symfony_behaviors behavior
	
	/**
	 * Calls methods defined via {@link sfMixer}.
	 */
	public function __call($method, $arguments)
	{
	  if (!$callable = sfMixer::getCallable('BaseListing:'.$method))
	  {
	    throw new sfException(sprintf('Call to undefined method BaseListing::%s', $method));
	  }
	
	  array_unshift($arguments, $this);
	
	  return call_user_func_array($callable, $arguments);
	}

} // BaseListing
